#include <bits/stdc++.h>
using namespace std;
using ld = long double;
const int N = 105;
int n, k, a[N];
ld dp[N][N][1000], pref[N];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> k;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}

	for (int i = 1; i <= n; i++) {
		for (int j = i + 1; j <= n; j++) {
			dp[i][j][0] = 1;
		}
	}

	ld p = (ld) n * (n + 1) / 2.0;

	for (int m = 1; m <= k; m++) {
		for (int i = 1; i <= n; i++) {
			for (int j = i + 1; j <= n; j++) {
				dp[i][j][m] = (ld) (j - i - 1) * (j - i) / 2.0;
				dp[i][j][m] += (ld) (i - 1) * i / 2.0;
				dp[i][j][m] += (ld) (n - j) * (n - j + 1) / 2.0;
				dp[i][j][m] *= dp[i][j][m - 1];

				for (int sum = j + 1; sum <= n + i; sum++) {
					int start = max(sum - n + 1, 1);
					int end = min(i, sum - j);
					dp[i][j][m] += (ld) (1.0 - dp[sum - j][sum - i][m - 1]) * (end - start + 1);
				}

				for (int sum = i + 1; sum <= i + j - 1; sum++) {
					int start = max(sum - j + 1, 1);
					int end = min(i, sum - i);
					dp[i][j][m] += (ld) (dp[sum - i][j][m - 1]) * (end - start + 1);
				}

				for (int sum = i + j + 1; sum <= n + j; sum++) {
					int start = max(i + 1, sum - n + 1);
					int end = min(j, sum - j);
					dp[i][j][m] += (ld) (dp[i][sum - j][m - 1]) * (end - start + 1);
				}

				dp[i][j][m] /= p;
				cout << m << ' ' << i << ' ' << j << ' ' << dp[i][j][m] << endl;
			}
		}
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cout << dp[i][j][k] << ' ';
		}
		cout << endl;
	}

	ld ans = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = i + 1; j <= n; j++) {
			if (a[i] < a[j]) {
				ans += 1 - dp[i][j][k];
			}
			else {
				ans += dp[i][j][k];
			}
		}
	}
	
	cout << setprecision(13) << ans << '\n';

	return 0;
}
